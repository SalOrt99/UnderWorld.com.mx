import { useState, useEffect } from 'react';
import { Users, Edit, Trash, Plus } from 'lucide-react';

interface User {
  user_id: number;
  role_id: number;
  status_id: number;
  username: string;
  email: string;
  password_hash: string;
  created_at: string;
  updated_at: string;
  last_login: string | null;
}

interface UserProfile {
  profile_id: number;
  user_id: number;
  first_name: string | null;
  last_name: string | null;
  apellido_paterno: string | null;
  apellido_materno: string | null;
  profile_photo_url: string | null;
  phone_number: string | null;
  created_at: string;
  updated_at: string;
}

interface Role {
  role_id: number;
  role_name: string;
  created_at: string;
  updated_at: string;
}

interface UserStatus {
  status_id: number;
  status_name: string;
  created_at: string;
}

const initialUsers: User[] = [
  { user_id: 1, role_id: 1, status_id: 1, username: 'admin', email: 'admin@example.com', password_hash: 'password', created_at: '2022-01-01 00:00:00', updated_at: '2022-01-01 00:00:00', last_login: null },
  { user_id: 2, role_id: 2, status_id: 1, username: 'user', email: 'user@example.com', password_hash: 'password', created_at: '2022-01-01 00:00:00', updated_at: '2022-01-01 00:00:00', last_login: null },
];

const initialUserProfiles: UserProfile[] = [
  { profile_id: 1, user_id: 1, first_name: 'Admin', last_name: 'User', apellido_paterno: 'Paterno', apellido_materno: 'Materno', profile_photo_url: null, phone_number: null, created_at: '2022-01-01 00:00:00', updated_at: '2022-01-01 00:00:00' },
  { profile_id: 2, user_id: 2, first_name: 'Regular', last_name: 'User', apellido_paterno: 'Paterno', apellido_materno: 'Materno', profile_photo_url: null, phone_number: null, created_at: '2022-01-01 00:00:00', updated_at: '2022-01-01 00:00:00' },
];

const initialRoles: Role[] = [
  { role_id: 1, role_name: 'admin', created_at: '2022-01-01 00:00:00', updated_at: '2022-01-01 00:00:00' },
  { role_id: 2, role_name: 'user', created_at: '2022-01-01 00:00:00', updated_at: '2022-01-01 00:00:00' },
];

const initialUserStatuses: UserStatus[] = [
  { status_id: 1, status_name: 'active', created_at: '2022-01-01 00:00:00' },
  { status_id: 2, status_name: 'inactive', created_at: '2022-01-01 00:00:00' },
  { status_id: 3, status_name: 'suspended', created_at: '2022-01-01 00:00:00' },
];

const CRUD = () => {
  const [users, setUsers] = useState(initialUsers);
  const [userProfiles, setUserProfiles] = useState(initialUserProfiles);
  const [roles, setRoles] = useState(initialRoles);
  const [userStatuses, setUserStatuses] = useState(initialUserStatuses);
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [isEditing, setIsEditing] = useState(false);

  const handleCreateUser = () => {
    const newUser: User = {
      user_id: users.length + 1,
      role_id: 2,
      status_id: 1,
      username: '',
      email: '',
      password_hash: '',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      last_login: null,
    };
    setUsers([...users, newUser]);
    setSelectedUser(newUser);
    setIsEditing(true);
  };

  const handleEditUser = (user: User) => {
    setSelectedUser(user);
    setIsEditing(true);
  };

  const handleSaveUser = (user: User) => {
    const updatedUsers = users.map((u) => (u.user_id === user.user_id ? user : u));
    setUsers(updatedUsers);
    setIsEditing(false);
  };

  const handleDeleteUser = (user: User) => {
    const updatedUsers = users.filter((u) => u.user_id !== user.user_id);
    setUsers(updatedUsers);
  };

  return (
    <div className="max-w-7xl mx-auto p-4 sm:p-6 md:p-8">
      <h1 className="text-3xl font-bold mb-4">CRUD</h1>
      <div className="flex justify-between mb-4">
        <button
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          onClick={handleCreateUser}
        >
          <Plus className="mr-2" />
          Create User
        </button>
      </div>
      <table className="w-full table-auto">
        <thead>
          <tr>
            <th className="px-4 py-2">User ID</th>
            <th className="px-4 py-2">Username</th>
            <th className="px-4 py-2">Email</th>
            <th className="px-4 py-2">Role</th>
            <th className="px-4 py-2">Status</th>
            <th className="px-4 py-2">Actions</th>
          </tr>
        </thead>
        <tbody>
          {users.map((user) => (
            <tr key={user.user_id}>
              <td className="px-4 py-2">{user.user_id}</td>
              <td className="px-4 py-2">{user.username}</td>
              <td className="px-4 py-2">{user.email}</td>
              <td className="px-4 py-2">{roles.find((role) => role.role_id === user.role_id)?.role_name}</td>
              <td className="px-4 py-2">{userStatuses.find((status) => status.status_id === user.status_id)?.status_name}</td>
              <td className="px-4 py-2">
                <button
                  className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2"
                  onClick={() => handleEditUser(user)}
                >
                  <Edit className="mr-2" />
                  Edit
                </button>
                <button
                  className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"
                  onClick={() => handleDeleteUser(user)}
                >
                  <Trash className="mr-2" />
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      {isEditing && selectedUser && (
        <div className="mt-4">
          <h2 className="text-2xl font-bold mb-2">Edit User</h2>
          <form>
            <div className="mb-4">
              <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="username">
                Username
              </label>
              <input
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                id="username"
                type="text"
                value={selectedUser.username}
                onChange={(e) => setSelectedUser({ ...selectedUser, username: e.target.value })}
              />
            </div>
            <div className="mb-4">
              <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="email">
                Email
              </label>
              <input
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                id="email"
                type="email"
                value={selectedUser.email}
                onChange={(e) => setSelectedUser({ ...selectedUser, email: e.target.value })}
              />
            </div>
            <div className="mb-4">
              <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="role">
                Role
              </label>
              <select
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                id="role"
                value={selectedUser.role_id}
                onChange={(e) => setSelectedUser({ ...selectedUser, role_id: parseInt(e.target.value, 10) })}
              >
                {roles.map((role) => (
                  <option key={role.role_id} value={role.role_id}>
                    {role.role_name}
                  </option>
                ))}
              </select>
            </div